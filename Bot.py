import disnake
from disnake.ext import commands
from typing import Optional
import os
from Config import *



bot = commands.Bot(command_prefix="!", help_command=None, intents=disnake.Intents.all(), test_guilds=[1273029650464903350])

class Fraction(disnake.ui.View):
    
    def __init__(self):
        super().__init__(timeout=None)
        self.value = Optional[bool]

    @disnake.ui.button(label="–ö—Ä–∞–π–º", style=disnake.ButtonStyle.blurple, emoji = "üëì")
    async def Crime(self, button:disnake.ui.button, inter: disnake.MessageInteraction):
        global Frac
        await inter.send("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", view=ContractsCrime())
        self.value = True
        Frac = "Crime"
    @disnake.ui.button(label="–ì–æ—Å—Å", style=disnake.ButtonStyle.blurple, emoji = "ü¶∫")
    async def Farm(self, button:disnake.ui.button, inter: disnake.MessageInteraction):
        global Frac
        await inter.send("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", view=ContractsFarm())
        self.value = True
        Frac = "Farm"


class ContractsFarm(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.value = Optional[bool]

    @disnake.ui.button(label="–î–∞—Ä—ã –º–æ—Ä—è", style=disnake.ButtonStyle.blurple, emoji = "üê≥")
    async def SeaGift(self, button:disnake.ui.button, inter: disnake.MessageInteraction):
        await inter.send("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", ephemeral=True, view=SeaGifts())
        self.value = True
    @disnake.ui.button(label="–ú–µ—Ç–∞–ª–ª—É—Ä–≥", style=disnake.ButtonStyle.blurple, emoji = "‚õè")
    async def Metal(self, button:disnake.ui.button, inter: disnake.MessageInteraction):
        await inter.send("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", ephemeral=True, view=Metals())
        self.value = True

class ContractsCrime(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.value = Optional[bool]

    @disnake.ui.button(label="–ì—Ä–æ–≤–µ—Ä", style=disnake.ButtonStyle.blurple, emoji = "üå±")
    async def Grover(self, button:disnake.ui.button, inter: disnake.MessageInteraction):
        await inter.send("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", ephemeral=True, view=Grovers())
        self.value = True


class ContractLogAccept(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.value = Optional[bool]

    @disnake.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=disnake.ButtonStyle.green, emoji = "‚úÖ")
    async def AcceptCont(self, button:disnake.ui.button, inter: disnake.MessageInteraction):
        await inter.send(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–∏–Ω—è—Ç \n–ö—Ç–æ –ø—Ä–∏–Ω—è–ª - {inter.user.name}/{inter.user.display_name}")
        for i in member.split():
            try:
                if choice == 1:
                    summ, comment = await Dropdown.returnsumm(self, inter)
                elif choice == 2:
                    summ, comment = await Dropdown1.returnsumm(self, inter)
                elif choice == 3:
                    summ, comment = await Dropdown2.returnsumm(self, inter)    
                static = int(i)
                File = open("File.txt", "a+")
                File.write(f"{static};{summ};{comment}\n")
                File.close()
            except:
                pass
                
        self.value = True
        self.stop()

    @disnake.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=disnake.ButtonStyle.red, emoji = "‚õî")
    async def CancelCont(self, button:disnake.ui.button, inter: disnake.MessageInteraction):
        await inter.send(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω \n–ö—Ç–æ –æ—Ç–∫–ª–æ–Ω–∏–ª - {inter.user.name}/{inter.user.display_name}")
        self.value = False
        self.stop()
    
class Delete(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.value = Optional[bool]

    @disnake.ui.button(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥", style=disnake.ButtonStyle.red, emoji = "üéà")
    async def DeleteLog(self, button:disnake.ui.button, inter: disnake.MessageInteraction):
        os.remove("File.txt")
        File = open("File.txt", "a+")
        File.write(f"staticId;amount;comment\n")
        await inter.send("–õ–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.value = True
        self.stop()
    
class Dropdown1(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label=f"1–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è, –í—ã–ø–ª–∞—Ç–∞: {Metal1}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
            disnake.SelectOption(label=f"2–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è, –í—ã–ø–ª–∞—Ç–∞: {Metal2}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
            disnake.SelectOption(label=f"3–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è, –í—ã–ø–ª–∞—Ç–∞: {Metal3}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
            disnake.SelectOption(label=f"4–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è, –í—ã–ø–ª–∞—Ç–∞: {Metal4}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
        ]
        super().__init__(
            placeholder = "MENU",
            min_values = 1,
            max_values = 1,
            options = options 
        )
    async def callback(self, inter: disnake.MessageInteraction):
        global choice
        global member
        global contract 
        choice = 2
        member = inter.user.display_name
        contract = inter.data["values"][0]
        await ContarctLog(member, contract)
        await inter.response.send_message(f"–û—Ç—á–µ—Ç –Ω–∞ {self.values[0]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", ephemeral=True)
    async def returnsumm(self, inter: disnake.MessageInteraction):
        for i in contract.split():
            try:
                money = int(i)
                return(money, f"{contract}")
            except:
                pass

class Metals(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Dropdown1())

class Dropdown2(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label=f"1–ì—Ä–æ–≤–µ—Ä, –í—ã–ø–ª–∞—Ç–∞: {Grover1}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
            disnake.SelectOption(label=f"2–ì—Ä–æ–≤–µ—Ä, –í—ã–ø–ª–∞—Ç–∞: {Grover2}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
            disnake.SelectOption(label=f"3–ì—Ä–æ–≤–µ—Ä, –í—ã–ø–ª–∞—Ç–∞: {Grover3}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
            disnake.SelectOption(label=f"4–ì—Ä–æ–≤–µ—Ä, –í—ã–ø–ª–∞—Ç–∞: {Grover4}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
            disnake.SelectOption(label=f"5–ì—Ä–æ–≤–µ—Ä, –í—ã–ø–ª–∞—Ç–∞: {Grover5}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")
        ]
        super().__init__(
            placeholder = "MENU",
            min_values = 1,
            max_values = 1,
            options = options 
        )
    async def callback(self, inter: disnake.MessageInteraction):
        global choice
        global member 
        global contract
        choice = 3
        member = inter.user.display_name
        contract = inter.data["values"][0]
        await ContarctLog(member, contract)
        await inter.response.send_message(f"–û—Ç—á–µ—Ç –Ω–∞ {self.values[0]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", ephemeral=True)
    async def returnsumm(self, inter: disnake.MessageInteraction):
         for i in contract.split():
            try:
                money = int(i)
                return(money, f"{contract}")
            except:
                pass

class Grovers(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Dropdown2())

class Dropdown(disnake.ui.StringSelect):
    def __init__(self):
        options = [
           disnake.SelectOption(label=f"1–î–∞—Ä—ã –º–æ—Ä—è, –í—ã–ø–ª–∞—Ç–∞: {SeaGift1}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
           disnake.SelectOption(label=f"2–î–∞—Ä—ã –º–æ—Ä—è, –í—ã–ø–ª–∞—Ç–∞: {SeaGift2}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
           disnake.SelectOption(label=f"3–î–∞—Ä—ã –º–æ—Ä—è, –í—ã–ø–ª–∞—Ç–∞: {SeaGift3}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
           disnake.SelectOption(label=f"4–î–∞—Ä—ã –º–æ—Ä—è, –í—ã–ø–ª–∞—Ç–∞: {SeaGift4}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
           disnake.SelectOption(label=f"5–î–∞—Ä—ã –º–æ—Ä—è, –í—ã–ø–ª–∞—Ç–∞: {SeaGift5}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
           disnake.SelectOption(label=f"6–î–∞—Ä—ã –º–æ—Ä—è, –í—ã–ø–ª–∞—Ç–∞: {SeaGift6}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
           disnake.SelectOption(label=f"7–î–∞—Ä—ã –º–æ—Ä—è, –í—ã–ø–ª–∞—Ç–∞: {SeaGift7}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
           disnake.SelectOption(label=f"8–î–∞—Ä—ã –º–æ—Ä—è, –í—ã–ø–ª–∞—Ç–∞: {SeaGift8}", description="–í—ã–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")
        ]
        super().__init__(
            placeholder = "MENU",
            min_values = 1,
            max_values = 1,
            options = options 
        )
    async def callback(self, inter: disnake.MessageInteraction):
        global choice 
        global member
        global contract
        choice = 1
        member = inter.user.display_name
        contract = inter.data["values"][0]
        await ContarctLog(member, contract)
        await inter.response.send_message(f"–û—Ç—á–µ—Ç –Ω–∞ {self.values[0]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", ephemeral=True)
    async def returnsumm(self, inter: disnake.MessageInteraction):
        for i in contract.split():
            try:
                money = int(i)
                return(money, f"{contract}")
            except:
                pass



class SeaGifts(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Dropdown())
    
@bot.event
async def on_ready():
    print(f"Bot {bot.user} is ready!")

async def ContarctLog(member, contract):
    view = ContractLogAccept()
    channel = bot.get_channel(log_contracts) 
    embed = disnake.Embed(
        title= "–ù–æ–≤—ã–π –ª–æ–≥",
        description = f"–ò–≥—Ä–æ–∫ - {member}\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç - {contract}"
        
    )
    await channel.send(embed=embed, view=view)

@bot.command()
@commands.has_permissions(administrator=True)
async def reg(ctx):
    view = Fraction()
    await ctx.send(f"–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –≤–µ—Ç–∫—É —Å–≤–æ–π —Ñ–∞–º—ã", view=view)
    

@bot.command()
@commands.has_permissions(administrator=True)
async def log(ctx):
    view = Delete()
    await ctx.send("–û—Ç—á–µ—Ç –¥–ª—è –≤—ã–ø–ª–∞—Ç", file=disnake.File("File.txt"), view=view)
    


bot.run("TOKEN")
